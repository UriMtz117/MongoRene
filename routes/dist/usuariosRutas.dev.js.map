{"version":3,"sources":["usuariosRutas.js"],"names":["router","post","req","res","body","respuesta","status","cookie","token","json","get","User","find","usuarios","length","findById","params","id","usuario","findByIdAndDelete","put","findByIdAndUpdate","runValidators"],"mappings":"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","sourcesContent":["import { Router } from \"express\"; \r\nimport { register, login } from \"../db/usuariosBD.js\";\r\nimport User from \"../models/usuarioModelo.js\";\r\nimport { mensajes } from \"../libs/manejoErrores.js\";\r\n\r\nconst router = Router();\r\n\r\n// Registro de usuario\r\nrouter.post(\"/registro\", async (req, res) => {\r\n    const respuesta = await register(req.body);\r\n    if (respuesta.status === 200) {\r\n        res.cookie('token', respuesta.token).status(respuesta.status).json(respuesta);\r\n    } else {\r\n        res.status(respuesta.status).json(respuesta);\r\n    }\r\n});\r\n\r\n// Inicio de sesiÃ³n\r\nrouter.post(\"/login\", async (req, res) => {\r\n    const respuesta = await login(req.body);\r\n    res.status(respuesta.status).json(respuesta);\r\n});\r\n\r\n// Obtener todos los usuarios\r\nrouter.get(\"/usuarios\", async (req, res) => {\r\n    try {\r\n        const usuarios = await User.find();\r\n        res.status(usuarios.length ? 200 : 404).json(usuarios.length ? usuarios : mensajes(404, \"No hay usuarios disponibles\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener usuarios\", error));\r\n    }\r\n});\r\n\r\n// Obtener usuario por ID\r\nrouter.get(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findById(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(usuario);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener el usuario\", error));\r\n    }\r\n});\r\n\r\n// Borrar usuario por ID\r\nrouter.delete(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndDelete(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario borrado correctamente\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al borrar el usuario\", error));\r\n    }\r\n});\r\n\r\n// Actualizar usuario por ID\r\nrouter.put(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario actualizado correctamente\", usuario));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al actualizar el usuario\", error));\r\n    }\r\n});\r\n\r\nexport default router;\r\n"],"file":"usuariosRutas.dev.js"}