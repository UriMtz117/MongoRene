{"version":3,"sources":["usuariosRutas.js"],"names":["_express","require","_usuariosBD","_usuarioModelo","_interopRequireDefault","_manejoErrores","router","Router","post","req","res","respuesta","regeneratorRuntime","async","_context","prev","next","awrap","register","body","sent","status","cookie","token","json","stop","_context2","login","get","usuarios","_context3","User","find","length","mensajes","t0","findById","params","id","usuario","_context4","_context5","findByIdAndDelete","abrupt","findByIdAndUpdate","new","runValidators","_context6"],"mappings":"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","file":"usuariosRutas.min.js","sourcesContent":["import { Router } from \"express\"; \r\nimport { register, login } from \"../db/usuariosBD.js\";\r\nimport User from \"../models/usuarioModelo.js\";\r\nimport { mensajes } from \"../libs/manejoErrores.js\";\r\n\r\nconst router = Router();\r\n\r\n// Registro de usuario\r\nrouter.post(\"/registro\", async (req, res) => {\r\n    const respuesta = await register(req.body);\r\n    if (respuesta.status === 200) {\r\n        res.cookie('token', respuesta.token).status(respuesta.status).json(respuesta);\r\n    } else {\r\n        res.status(respuesta.status).json(respuesta);\r\n    }\r\n});\r\n\r\n// Inicio de sesiÃ³n\r\nrouter.post(\"/login\", async (req, res) => {\r\n    const respuesta = await login(req.body);\r\n    res.status(respuesta.status).json(respuesta);\r\n});\r\n\r\n// Obtener todos los usuarios\r\nrouter.get(\"/usuarios\", async (req, res) => {\r\n    try {\r\n        const usuarios = await User.find();\r\n        res.status(usuarios.length ? 200 : 404).json(usuarios.length ? usuarios : mensajes(404, \"No hay usuarios disponibles\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener usuarios\", error));\r\n    }\r\n});\r\n\r\n// Obtener usuario por ID\r\nrouter.get(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findById(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(usuario);\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al obtener el usuario\", error));\r\n    }\r\n});\r\n\r\n// Borrar usuario por ID\r\nrouter.delete(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndDelete(req.params.id);\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario borrado correctamente\"));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al borrar el usuario\", error));\r\n    }\r\n});\r\n\r\n// Actualizar usuario por ID\r\nrouter.put(\"/usuarios/:id\", async (req, res) => {\r\n    try {\r\n        const usuario = await User.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });\r\n        if (!usuario) return res.status(404).json(mensajes(404, \"Usuario no encontrado\"));\r\n        res.status(200).json(mensajes(200, \"Usuario actualizado correctamente\", usuario));\r\n    } catch (error) {\r\n        res.status(500).json(mensajes(500, \"Error al actualizar el usuario\", error));\r\n    }\r\n});\r\n\r\nexport default router;\r\n"]}