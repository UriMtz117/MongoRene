{"version":3,"sources":["usuariosBD.js"],"names":["register","username","email","password","User","findOne","usuarioExistente","emailExitente","salt","hash","data","save","respuesta","id","_id","token","login","usuarioCorrecto","passwordCorrecto"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEO,SAAeA,QAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyBC,UAAAA,QAAzB,QAAyBA,QAAzB,EAAmCC,KAAnC,QAAmCA,KAAnC,EAA0CC,QAA1C,QAA0CA,QAA1C;AAAA;AAAA;AAAA,0CAEgCC,0BAAKC,OAAL,CAAa;AAACJ,YAAAA,QAAQ,EAARA;AAAD,WAAb,CAFhC;;AAAA;AAEOK,UAAAA,gBAFP;AAAA;AAAA,0CAG6BF,0BAAKC,OAAL,CAAa;AAACH,YAAAA,KAAK,EAALA;AAAD,WAAb,CAH7B;;AAAA;AAGOK,UAAAA,aAHP;;AAAA,gBAKKD,gBAAgB,IAAIC,aALzB;AAAA;AAAA;AAAA;;AAAA,2CAMY,6BAAS,GAAT,EAAc,mBAAd,CANZ;;AAAA;AAAA,+BASsB,0CAAkBJ,QAAlB,CATtB,EASQK,IATR,sBASQA,IATR,EAScC,IATd,sBAScA,IATd;AAUOC,UAAAA,IAVP,GAUc,IAAIN,yBAAJ,CAAS;AAACH,YAAAA,QAAQ,EAARA,QAAD;AAAWC,YAAAA,KAAK,EAALA,KAAX;AAAkBC,YAAAA,QAAQ,EAACM,IAA3B;AAAiCD,YAAAA,IAAI,EAAJA;AAAjC,WAAT,CAVd;AAAA;AAAA,0CAWuBE,IAAI,CAACC,IAAL,EAXvB;;AAAA;AAWKC,UAAAA,SAXL;AAAA;AAAA,0CAYmB,qBAAW;AAACC,YAAAA,EAAE,EAACD,SAAS,CAACE;AAAd,WAAX,CAZnB;;AAAA;AAYOC,UAAAA,KAZP;AAAA,2CAaQ,6BAAS,GAAT,EAAa,iCAAb,EAAgD,EAAhD,EAAoDA,KAApD,CAbR;;AAAA;AAAA;AAAA;AAAA,2CAeQ,6BAAS,GAAT,EAAa,+BAAb,CAfR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOf,UAAAA,QAAP,SAAOA,QAAP,EAAiBE,QAAjB,SAAiBA,QAAjB;AAAA;AAAA;AAAA,0CAEeC,0BAAKC,OAAL,CAAa;AAACJ,YAAAA,QAAQ,EAARA;AAAD,WAAb,CAFf;;AAAA;AAETgB,UAAAA,eAFS;;AAAA,cAGRA,eAHQ;AAAA;AAAA;AAAA;;AAAA,4CAIF,6BAAS,GAAT,EAAc,mBAAd,CAJE;;AAAA;AAMPC,UAAAA,gBANO,GAMY,wCAAgBf,QAAhB,EAA0Bc,eAAe,CAACT,IAA1C,EAAgDS,eAAe,CAACd,QAAhE,CANZ;;AAAA,cAORe,gBAPQ;AAAA;AAAA;AAAA;;AAAA,4CAQF,6BAAS,GAAT,EAAc,mBAAd,CARE;;AAAA;AAAA,4CAUN,6BAAS,GAAT,EAAc,kBAAd,CAVM;;AAAA;AAAA;AAAA;AAAA,4CAaN,6BAAS,GAAT,EAAc,mBAAd,CAbM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd","sourcesContent":["import User from \"../models/usuarioModelo.js\";\r\nimport { mensajes } from \"../libs/manejoErrores.js\";\r\nimport { crearToken } from \"../libs/jwt.js\";\r\nimport {encriptarPassword, validarPassword} from \"../middlewares/funcionesPassword.js\"\r\n\r\nexport async function register({username, email, password}){\r\n    try {\r\n        const usuarioExistente = await User.findOne({username});\r\n        const emailExitente = await User.findOne({email});\r\n\r\n        if (usuarioExistente || emailExitente){\r\n            return mensajes(400, \"Usuario duplicado\");\r\n        }\r\n\r\n        const {salt, hash} = encriptarPassword(password);\r\n        const data = new User({username, email, password:hash, salt})\r\n        var respuesta = await data.save();\r\n        const token=await crearToken({id:respuesta._id});\r\n        return mensajes(200,\"Registro agregado correctamente\", \"\", token);\r\n    } catch (error) {\r\n        return mensajes(400,\"Error al registrar al usuario\");\r\n    }\r\n}\r\n\r\nexport const login = async({username, password})=>{\r\n   try {\r\n        var usuarioCorrecto = await User.findOne({username});\r\n        if (!usuarioCorrecto){\r\n            return mensajes(400, \"datos incorrectos\")\r\n        }\r\n        const passwordCorrecto = validarPassword(password, usuarioCorrecto.salt, usuarioCorrecto.password);\r\n        if (!passwordCorrecto){\r\n            return mensajes(400, \"datos incorrectos\")\r\n        }\r\n        return mensajes(200, \"ingreso correcto\");\r\n   } catch (error) {\r\n        //console.log(\"catch incorrecto\");\r\n        return mensajes(400, \"datos incorrectos\");\r\n   }\r\n}"],"file":"usuariosBD.dev.js"}